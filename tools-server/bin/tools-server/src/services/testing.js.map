{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../../../src/services/testing.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,gDAA0D;AAC1D,6DAAgE;AAIzD,IAAM,QAAQ,GAAd,MAAM,QAAQ;;AACV,qBAAY,GAAG,IAAI,CAAC;AACpB,qBAAY,GAAG,IAAI,CAAC;AAEpB,uBAAc,GAAG,wBAAwB,CAAC;AAC1C,uBAAc,GAAG,wBAAwB,CAAC;AAC1C,uBAAc,GAAG,wBAAwB,CAAC;AAE1C,oBAAW,GAAG,EAAE,CAAC;AACjB,oBAAW,GAAG,EAAE,CAAC;AACjB,oBAAW,GAAG,EAAE,CAAC;AAEkB,yBAAgB,GAAG,iCAAkC,CAAA;AACtD,sBAAa,GAAG,UAAW,CAAA;AAE7D,8BAAqB,GAA4B;IACpD,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;CACV,CAAC;AAPwC;IAAzC,IAAA,qBAAY,EAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;;wCAA6D;AACtD;IAAxC,IAAA,qBAAY,EAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;;qCAAkC;AAb3D,QAAQ;IADpB,IAAA,qBAAY,GAAE;GACF,QAAQ,CA2BpB;AA3BY,4BAAQ;AA8BrB,UAAU,CAAC,QAAQ,GAAG,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAqB,CAAC;AAC3E,KAAK,UAAU,UAAU,CAAC,GAAW,EAAE,OAAa;IACvD,IAAA,WAAI,EAAC,mBAAmB,QAAQ,CAAC,YAAY,sBAAsB,QAAQ,CAAC,YAAY,wBAAwB,QAAQ,CAAC,cAAc,wBAAwB,QAAQ,CAAC,cAAc,qBAAqB,QAAQ,CAAC,WAAW,qBAAqB,QAAQ,CAAC,WAAW,qBAAqB,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAC;IACtT,IAAI,GAAG,GAAG,QAAQ,CAAC;IACnB,IAAA,WAAI,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC/B,4BAA4B,EAAE,CAAC;IAC/B,OAAO,EAAC,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC;AAC7C,CAAC;AAND,gCAMC;AAGD,4BAA4B,CAAC,QAAQ,GAAG,EAAE,aAAa,EAAE,MAAM,EAAoB,CAAC;AACpF,KAAK,UAAU,4BAA4B;IACvC,IAAA,WAAI,EAAC,cAAc,CAAC,CAAC;AACzB,CAAC;AAED,WAAW,CAAC,QAAQ,GAAG,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAqB,CAAC;AAC5E,KAAK,UAAU,WAAW,CAAC,GAAW,EAAE,OAAa;IACxD,IAAA,WAAI,EAAC,mBAAmB,QAAQ,CAAC,YAAY,sBAAsB,QAAQ,CAAC,YAAY,wBAAwB,QAAQ,CAAC,cAAc,wBAAwB,QAAQ,CAAC,cAAc,qBAAqB,QAAQ,CAAC,WAAW,qBAAqB,QAAQ,CAAC,WAAW,qBAAqB,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAC;IACtT,IAAI,GAAG,GAAG,QAAQ,CAAC;IACnB,IAAA,WAAI,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC/B,4BAA4B,EAAE,CAAC;IAC/B,OAAO,EAAC,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC;AAC7C,CAAC;AAND,kCAMC","sourcesContent":["\r\nimport { Index, logE, logI } from '../../../kit/src/core';\r\nimport { configurable } from '../../../gserver/src/core/config';\r\nimport { ServiceMetadata } from '../../../gserver/src/core/schema';\r\n\r\n@configurable()\r\nexport class Settings {\r\n    static cfgBoolTest1 = true;\r\n    static cfgBoolTest2 = true;\r\n   // @configurable({ encrypted: true }) static reverToken = '';\r\n    static cfgStringTest1 = 'cfgStringTest1_default';\r\n    static cfgStringTest2 = 'cfgStringTest2_default';\r\n    static cfgStringTest3 = 'cfgStringTest3_default';\r\n\r\n    static cfgNumTest1 = 11;\r\n    static cfgNumTest2 = 22;\r\n    static cfgNumTest3 = 33;\r\n\r\n    @configurable({ encrypted: true }) static cfgEncryptedTest = 'blabla_ENCRYPTED_DEFAULT_blabla';\r\n    @configurable({ encrypted: true })static someSecretBoo = 'bobobobo';\r\n\r\n    static cfgMapIndexNumberTest: {[key: string]: number} = {\r\n        k1: 101,\r\n        k2: 102,\r\n        k3: 103,\r\n    };\r\n\r\n\r\n    // static cfgMapIndexNumberTest: Index<number> = {\r\n    //     k1: 101,\r\n    //     k2: 102,\r\n    //     k3: 103,\r\n    // };\r\n}\r\n\r\n\r\nhelloWorld.metadata = { authorization: 'none', method: 'ANY' } as ServiceMetadata;\r\nexport async function helloWorld(req: string, context?: any/*ToolsServiceContext*/): Promise<any> {\r\n    logI(`cfgBoolTest1 = [${Settings.cfgBoolTest1}]\\ncfgBoolTest2 = [${Settings.cfgBoolTest2}]\\ncfgStringTest1 = [${Settings.cfgStringTest2}]\\ncfgStringTest3 = [${Settings.cfgStringTest3}]\\ncfgNumTest1 = [${Settings.cfgNumTest1}]\\ncfgNumTest2 = [${Settings.cfgNumTest2}]\\ncfgNumTest3 = [${Settings.cfgNumTest3}]`);\r\n    let tmp = Settings;\r\n    logI(`${JSON.stringify(tmp)}`);\r\n    _somePrivateFuncToTestLoader();\r\n    return {result: 'HelloWorld', from: req};\r\n}\r\n\r\n\r\n_somePrivateFuncToTestLoader.metadata = { authorization: 'none'} as ServiceMetadata;\r\nasync function _somePrivateFuncToTestLoader() {\r\n    logI('does nothing');\r\n}\r\n\r\nhelloWorld2.metadata = { authorization: 'none', method: 'ANY' } as ServiceMetadata;\r\nexport async function helloWorld2(req: string, context?: any/*ToolsServiceContext*/): Promise<any> {\r\n    logI(`cfgBoolTest1 = [${Settings.cfgBoolTest1}]\\ncfgBoolTest2 = [${Settings.cfgBoolTest2}]\\ncfgStringTest1 = [${Settings.cfgStringTest2}]\\ncfgStringTest3 = [${Settings.cfgStringTest3}]\\ncfgNumTest1 = [${Settings.cfgNumTest1}]\\ncfgNumTest2 = [${Settings.cfgNumTest2}]\\ncfgNumTest3 = [${Settings.cfgNumTest3}]`);\r\n    let tmp = Settings;\r\n    logI(`${JSON.stringify(tmp)}`);\r\n    _somePrivateFuncToTestLoader();\r\n    return {result: 'HelloWorld', from: req};\r\n}\r\n"]}