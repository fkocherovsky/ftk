{"version":3,"file":"string.js","sourceRoot":"","sources":["../../../../../kit/src/core/string.ts"],"names":[],"mappings":"","sourcesContent":["// import { isEmpty } from \"./reflect\";\r\n\r\n// export type StringLike = any;\r\n\r\n// /**\r\n//  * Checks whether the string matches the specified pattern(s).\r\n//  *\r\n//  * @param value   The string value to check.\r\n//  * @param pattern The pattern(s) to compare the string with.\r\n//  * @return        The result of the check.\r\n//  */\r\n// export function isLike(value: StringLike, ...patterns: Array<string | RegExp>): boolean {\r\n//     if (value == null || value === '') {\r\n//        return !patterns.length || isEmpty(patterns[0]);\r\n//     }\r\n//     let str = _toString(value);\r\n//     for (let pattern of patterns) {\r\n//        if (pattern instanceof RegExp) {\r\n//           return (str === findStr(str, pattern));   // BUG: this check is incorrect for partial patterns, e.g.: isLike('ab', /a|ab|ac/) => false\r\n//        } else if (typeof pattern === 'string') {\r\n//           return (str === _toString(pattern));\r\n//        }\r\n//     }\r\n//     return false;\r\n// }\r\n\r\n// /**\r\n//  * Finds the first substring that matches a specified pattern within the given string.\r\n//  *\r\n//  * @param value   The string value to search.\r\n//  * @param pattern The pattern to search for.\r\n//  * @return        The first matching substring, or the empty string if no match was found.\r\n//  */\r\n// export function findStr(value: StringLike, pattern: string | RegExp): string {\r\n//     let result: string = '';\r\n//     let regex = clearRegexFlag(pattern, 'g');\r\n//     if (regex) {\r\n//        _toString(value).replace(regex, str => result = str);\r\n//     }\r\n//     return result;\r\n//  }\r\n\r\n//  /**\r\n//  * Clears a regular expression flag.\r\n//  *\r\n//  * @param regex The regular expression.\r\n//  * @param flag  The flag to clear.\r\n//  * @return      The modified regular expression.\r\n//  */\r\n// export function clearRegexFlag(regex: string | RegExp, flag: string): RegExp {\r\n//     regex = toRegExp(regex);\r\n//     flag = toString(flag)[0];\r\n//     if (flag && regex?.flags.indexOf(flag) >= 0) {\r\n//        regex = new RegExp(regex.source, regex.flags.replace(flag, ''));\r\n//     }\r\n//     return regex;\r\n//  }\r\n \r\n \r\n\r\n// //////////////////////////\r\n// function _toString(value: StringLike, defaultValue?: string): string {\r\n//     if (value == null || value === '') {\r\n//        return (defaultValue !== undefined ? defaultValue : '');\r\n//     } else if (typeof value == 'string') {\r\n//        return value;\r\n//     } else {\r\n//        return value + '';\r\n//     }\r\n//  }\r\n \r\n "]}