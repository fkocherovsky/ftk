{"version":3,"file":"numbers.js","sourceRoot":"","sources":["../../../../../kit/src/core/numbers.ts"],"names":[],"mappings":";;;AASA,SAAgB,YAAY,CAAC,KAAa,EAAE,QAAiB;IACzD,IAAI,CAAC,QAAQ,EAAE;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC3B;SAAM,IAAI,QAAQ,GAAG,CAAC,EAAE;QAKtB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAC1C;SAAM;QACJ,OAAO,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KACnD;AACJ,CAAC;AAZF,oCAYE;AAQF,SAAS,YAAY,CAAC,KAAa,EAAE,QAAgB,EAAE,QAAkB;IAGrE,IAAI,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,KAAK,IAAI,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAGpE,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,GAAG,KAAK,CAAC;KACjB;IACD,OAAO,MAAM,CAAC;AACjB,CAAC","sourcesContent":["// TODO: DECOR\r\n/**\r\n * Rounds a number to the specified number of decimal places.\r\n *\r\n * @param value     The number to round.\r\n * @param decimals  Number of places after the decimal point to round to. Default is zero, resulting in integer rounding.\r\n *                  Can also be negative, resulting in rounding to specified place before the decimal point.\r\n * @return          The rounded number.\r\n */\r\nexport function roundDecimal(value: number, decimals?: number): number {\r\n    if (!decimals) {\r\n       return Math.round(value);\r\n    } else if (decimals > 0) {\r\n       // NOTES:\r\n       // - the builtin Number.toFixed has some bugs, for example: (2.55).toFixed(1) == 2.5 instead of 2.6\r\n       // - our _snapDecimal polyfill will return correct value in this case _snapDecimal(2.55,1) == 2.6\r\n       // - we still opt to use toFixed because it is slightly faster and also works with values that already have exponent\r\n       return +Number(value).toFixed(decimals);\r\n    } else {\r\n       return _snapDecimal(value, decimals, Math.round);\r\n    }\r\n }\r\n \r\n\r\n ///////////////////////////////////////////////////\r\n//#region Assistents\r\n\r\n//TODO: DECOR\r\n// snaps value to given precision\r\nfunction _snapDecimal(value: number, decimals: number, snapFunc: Function): number {\r\n    // use exponential notation to avoid arithmetic rounding errors.\r\n    // for example: Math.Floor(4.27 * 100) / 100 == 4.26 instead of 4.27.\r\n    let result = +(snapFunc(+`${value}e${decimals}`) + `e${-decimals}`);\r\n \r\n    // fallback in case value is already in exponential notation\r\n    if (isNaN(result) && !isNaN(value)) {\r\n       result = value;\r\n    }\r\n    return result;\r\n }\r\n "]}