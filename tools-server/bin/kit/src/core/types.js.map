{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../kit/src/core/types.ts"],"names":[],"mappings":";;;AAAA,uCAAqC;AACrC,uCAAyC;AAOzC,SAAgB,QAAQ,CAAC,GAAW;IAChC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;AAFD,4BAEC;AAED,MAAM,oBAAoB,GAAG,CAAC,CAAC;AAC/B,SAAgB,MAAM,CAAC,GAAQ;IAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAA,kBAAQ,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,sBAAY,EAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC;AAFD,wBAEC","sourcesContent":["import { isNumber } from './reflect';\r\nimport { roundDecimal } from './numbers';\r\n\r\nexport interface Index<T> { [key: string]: T; }\r\nexport interface Gmap { [key: string]: Gvalue; }\r\nexport type Garray = { [key: string]: Gvalue }[];\r\nexport type Gvalue = boolean | number | string | boolean[] | number[] | string[] | { [key: string]: Gvalue } | { [key: string]: Gvalue }[];\r\n\r\nexport function fromJson(str: string): any {\r\n    return JSON.parse(str);\r\n}\r\n\r\nconst GML_DECIMAL_ROUNDING = 5;\r\nexport function toJson(obj: any): string {\r\n   return JSON.stringify(obj, (k, v) => isNumber(v) ? roundDecimal(v, GML_DECIMAL_ROUNDING) : v);\r\n}\r\n"]}