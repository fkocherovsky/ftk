{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../../gserver/src/core/loader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Fsp from 'fs/promises';\r\nimport * as Path from 'path';\r\n\r\nimport { cfgServerBinRoot, cfgGetMetadata, cfgLoadMetadata, configCoreSrcRoot } from './config';\r\nimport { ServiceHandler } from './schema';\r\n\r\nimport { logE, Index, logI, GError } from '../../../kit/src/core';\r\nimport { isClass, isFunction, isSubClass } from '../../../kit/src/core/reflect';\r\nimport { AServiceContext, BasicServerContext, HttpServiceContext } from './context';\r\n\r\nexport let loaderServiceHandlers: Index<ServiceHandler> = {};\r\nexport let loaderContextClasses: Map<ConstructorOf<AServiceContext>, ConstructorOf<AServiceContext>> = new Map();\r\n\r\nexport async function loaderScanModules(path?: string) {\r\n    if (path == null) {\r\n        loaderContextClasses.set(HttpServiceContext, HttpServiceContext);\r\n        for (let fname of (await Fsp.readdir(cfgServerBinRoot))) {\r\n            let fpath = Path.resolve(cfgServerBinRoot, fname);\r\n            if ((await Fsp.stat(fpath)).isDirectory()) {\r\n                await loaderScanModules(fpath);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n\r\n    let coreServerRoot = Path.resolve(configCoreSrcRoot, '..');\r\n\r\n    for (let fname of (await Fsp.readdir(path))) {\r\n        let fpath = Path.resolve(path, fname).replace(/\\\\/g, \"/\");\r\n        if ((await Fsp.stat(fpath)).isDirectory()) {\r\n            await loaderScanModules(fpath);\r\n            continue;\r\n        }\r\n        if (!fname.match(/\\.js$/i)) { continue; }\r\n        let mod: any;\r\n        try {\r\n            mod = require(fpath);\r\n        } catch (e) {\r\n            logE(`Failed to load module: ${fpath}, [${e}]`);\r\n            continue;\r\n        }\r\n\r\n        _modules[fpath] = mod;\r\n        let relativePatStartPos = fpath.indexOf('/services/');\r\n        for (let [name, o] of Object.entries(mod)) {\r\n            if (!isFunction(o) && !isClass(o)) { continue; }\r\n            if (isClass(o)) {\r\n                let cmd = cfgGetMetadata(o) || null;\r\n                if (cmd != null) {\r\n                    cfgLoadMetadata(fpath, mod, o, cmd);\r\n                    continue;\r\n                }\r\n                if (!coreServerRoot) {\r\n                    if (isSubClass(o, HttpServiceContext)) { loaderContextClasses.set(HttpServiceContext, o as ConstructorOf<HttpServiceContext>); }\r\n                }\r\n            }\r\n            if (isFunction(o)) {\r\n                let isService = relativePatStartPos >= 0;\r\n                if (isService) {\r\n                    // if (name.startsWith('_')) { continue; } // skip private functions\r\n                    let servicePath = fpath.substr(relativePatStartPos + 1);\r\n                    let sName = `${ servicePath.replace(/\\/|\\\\/g, '.').replace(/\\.js$/i, '') }.${ name }`;\r\n                    if (loaderServiceHandlers[sName] != undefined) { \r\n                        logE(`Service ${sName} is already loaded}`);\r\n                        throw new GError(`Duplicate service implementations of '${sName}'`);\r\n                    }\r\n                    loaderServiceHandlers[sName] = o as ServiceHandler;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n  \r\n}\r\n\r\n\r\n/**************************************/\r\nlet _modules: Index<any> = {};"]}