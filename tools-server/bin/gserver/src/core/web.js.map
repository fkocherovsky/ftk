{"version":3,"file":"web.js","sourceRoot":"","sources":["../../../../../gserver/src/core/web.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\r\n\r\nimport { GError, Index, logEx } from '../../../kit/src/core';\r\n\r\nimport { configurable } from './config';\r\nimport { AServerContext, AServiceContext } from './context';\r\nimport { logTraffic } from './logger';\r\n\r\n@configurable()\r\nexport class Settings {\r\n    static contentTypes: Index<string> = {\r\n        '.html': 'text/html',\r\n        '.css': 'text/css',\r\n        '.js': 'text/javascript',\r\n        '.json': 'application/json',\r\n        '.xml': 'application/xhtml+xml',\r\n        '.jpg': 'image/jpeg',\r\n        '.jpeg': 'image/jpeg',\r\n        '.svg': 'image/svg+xml',\r\n        '.pdf': 'application/pdf',\r\n        '.png': 'image/png',\r\n        '.gif': 'image/gif',\r\n        '.zip': 'application/zip'\r\n     };\r\n}\r\n\r\nexport function webIsCompressible(size?: number, contentType?: string) {\r\n    return (size == null || size > MIN_COMPRESSABLE_SIZE) && (!contentType?.startsWith('image') || contentType == 'image/svg-xml') && (contentType != 'application/zip');\r\n}\r\n \r\n const MIN_COMPRESSABLE_SIZE = 1024; // don't compress if it fits 1 packet (1 packet is ~1400 bytes, but there's also header, so 1K seems to be just about right)\r\n \r\nexport function webGetContentType(file: string) {\r\n    if (!file) { return null; }\r\n    return Settings.contentTypes[Path.extname(file).toLowerCase()] || null;\r\n}\r\n\r\n// this method is used to respond in case of unexpected errors (therefore only status code is returned, no payload, because payload is unknown and cannot be correctly serialized)\r\nexport async function webServeError(error: Error, context: AServerContext, log = true) {\r\n   try {\r\n      let { code, httpStatus, message } = (error instanceof GError) ? error : GError.GENERAL_ERROR();\r\n      if (log) {\r\n         // timed-out handling is valuable to see when the actual response was supposed to be sent, and having what content\r\n         let timeout = context.isTimedout && !(error && error instanceof GError && error.code == GError.OPERATION_TIMEOUT().code);\r\n         logTraffic(timeout ? 'OUT(err)(timedout)' : 'OUT(err)', context, `${code} ${message}. REQUEST: ${context.format()}`);\r\n      }\r\n\r\n      await context.respond(httpStatus);\r\n   } catch (e) {\r\n      logEx(e); // can't really happen\r\n      try { await context.respond(500); } catch {}\r\n   }\r\n}\r\n\r\nexport async function webServeData(data: string, error: Error, context: AServiceContext) {\r\n   if (data == null && error != null) {\r\n      return webServeError(error, context);\r\n   }\r\n\r\n   // timed-out handling is valuable to see when the actual response was supposed to be sent, and having what content\r\n   let timeout = context.isTimedout && !(error && error instanceof GError && error.code == GError.OPERATION_TIMEOUT().code);\r\n   if (error != null) {\r\n      logTraffic(timeout ? 'OUT(err)(timedout)' : 'OUT(err)', context,  `${context.sd.isBinary ? '(binary)' : data}. REQUEST: ${context.format()}`);\r\n   } else {\r\n      logTraffic(timeout ? 'OUT(timedout)' : 'OUT', context, context.sd.isBinary ? '(binary)' : data);\r\n   }\r\n\r\n   let compress = data && data.length > MIN_COMPRESSABLE_SIZE;\r\n   let status = error == null ? 200 : (error instanceof GError ? error.httpStatus : 500);\r\n   await context.respond(status, data, compress);\r\n}\r\n\r\n \r\n\r\n "]}