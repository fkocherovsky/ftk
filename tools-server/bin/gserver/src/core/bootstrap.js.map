{"version":3,"file":"bootstrap.js","sourceRoot":"","sources":["../../../../../gserver/src/core/bootstrap.ts"],"names":[],"mappings":";;;AAIA,gDAAmD;AACnD,qCAA6D;AAE7D,qCAA4C;AAKrC,KAAK,UAAU,eAAe;IAClC,IAAI,KAAK,GAAG,IAAA,2BAAkB,GAAE,CAAC;IACjC,eAAO,GAAG,KAAK,CAAC,GAAG,CAAC;IACpB,IAAA,WAAI,EAAC,GAAG,OAAO,CAAC,GAAG,sCAAsC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACnF,MAAM,IAAA,yBAAgB,GAAE,CAAC;AAC5B,CAAC;AALD,0CAKC","sourcesContent":["// tslint:enable:naming-convention\r\nimport * as Http from 'http';\r\n\r\n// import { logE, logI } from 'kit/core';\r\nimport { logE, logI } from '../../../kit/src/core';\r\nimport { cfgGetStartupFlags, cfgInitialize } from './config';\r\nimport { loaderScanModules } from './loader';\r\nimport { initializeServer } from './server';\r\n\r\nexport let appName: string;\r\n\r\n// tslint:disable:no-console\r\nexport async function bootstrapServer() {\r\n   let flags = cfgGetStartupFlags();\r\n   appName = flags.app;\r\n   logI(`${process.pid}: Starting server (single-process): ` + JSON.stringify(flags));\r\n   await initializeServer();\r\n}"]}